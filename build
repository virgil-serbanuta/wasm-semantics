#!/usr/bin/env python3

import os
import subprocess
import sys

# Bootstrapping
# =============

# Make sure the KNinja repo is available.
#
kninja_submodule = '.build/kninja/'
if not os.path.exists(kninja_submodule + '/.git'):
    subprocess.check_call(['git', 'submodule', 'update', '--init', kninja_submodule])
sys.path.append(os.path.join(os.path.dirname(__file__), '.build'))

from kninja import *

# Build
# =====

proj = KProject(extdir = '.build')

test_k = proj.tangle('test.md')
wasm_k = proj.tangle('wasm.md')
data_k = proj.tangle('data.md')

def build_wasm(backend, flags = ''):
    return proj.definition( alias     = 'wasm-' + backend
                          , backend   = backend
                          , main      = test_k
                          , other     = [ wasm_k, data_k ]
                          , directory = proj.builddir('defn', backend)
                          , flags     = '--main-module WASM-TEST --syntax-module WASM-TEST ' \
                                      + flags
                          )

wasm_java = build_wasm(backend = 'java')
wasm_ocaml = build_wasm(backend = 'ocaml', flags = '-O3 --non-strict')
wasm_haskell = build_wasm(backend = 'haskell')

# Testing
# =======

concrete_backend = wasm_java
symbolic_backend = wasm_java

t_simple = concrete_backend.tests( glob = 'tests/simple/*.wast'
                                 , alias = 'test-simple'
                                 , expected = 'tests/success-java.out'
                                 )
t_proofs = symbolic_backend.proofs( glob = 'tests/proofs/*-spec.k'
                                  , alias = 'test-proofs'
                                  )
t_exec   = proj.alias('test-exec'  , t_simple          )
t_tests  = proj.alias('tests'      , [t_exec, t_proofs])

# Main
# ====

proj.main()
